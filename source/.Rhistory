#                         na.rm = FALSE,
#                         conf.interval = 0.95,
#                         .drop = TRUE) %>%
#   data.table()
#| warning: false
#| error: false
#| echo: false
ggplot(data = conflict_f,
mapping = aes(x = conflict,
y = reorder(decision, -conflict),
col = condition)) +
layout +
geom_line(show.legend=FALSE, lty=2) +
geom_errorbar(aes(xmin=conflict-ci, xmax=conflict+ci), width=.25, alpha = 0.5) +
scale_x_continuous(limits = c(1, 7), breaks = 1:7) +
geom_point() +
scale_color_manual(values = carto_pal(name = "Safe")) +
labs(x = 'Conflict',
y = 'Pairs',
caption = 'Bars indicate 95% confidence intervals.') +
theme(legend.position = 'None')
#| warning: false
#| error: false
#| echo: false
ggplot(data = conflict_m,
mapping = aes(x = conflict,
y = reorder(decision, -conflict),
col = condition)) +
layout +
geom_line(show.legend=FALSE, lty=2) +
geom_errorbar(aes(xmin=conflict-ci, xmax=conflict+ci), width=.25, alpha = 0.5) +
scale_x_continuous(limits = c(1, 7), breaks = 1:7) +
geom_point() +
scale_color_manual(values = carto_pal(name = "Safe")) +
labs(x = 'Conflict',
y = 'Pairs',
caption = 'Bars indicate 95% confidence intervals.') +
theme(legend.position = 'None')
#| echo: false
#| warning: false
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "Rmisc", "stringr", "ggplot2", "rcartocolor")
groundhog::groundhog.library(pkg = pkgs,
date = "2024-01-01")
rm(pkgs)
#| echo: false
#| warning: false
set.seed(42)
#| echo: false
#| warning: false
layout <- theme(panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey",
linewidth = 0.25),
axis.ticks.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.line.x.bottom = element_line(colour = "#000000",
linewidth = 0.5),
axis.line.y.left = element_blank(),
plot.title = element_text(size = rel(1))
)
#| echo: false
#| warning: false
c_coral     <- "#f27981"
c_yellow    <- "#F2EA79"
c_turquoise <- "#79f2ea"
c_purple    <- "#7981f2"
scale_color_custom_d <- function() {
scale_color_manual(values = c(c_purple, c_coral, c_turquoise, c_yellow))
}
scale_fill_custom_d <- function() {
scale_fill_manual(values = c(c_purple, c_coral, c_turquoise, c_yellow))
}
#| echo: false
#| warning: false
female <- fread('../../preference_expression/data/pre_test/2022-10-30.csv')
male <- fread('../../preference_expression/data/pre_test/2023-08-22.csv')
#| echo: false
#| warning: false
dt_1 <- female[-1]
dt_1 <- female[Finished == '1']
dt_1[, id := paste0("female_", 1:.N)]
dt_2 <- male[-1]
dt_2 <- male[Finished == '1']
dt_2[, id := paste0("male_", 1:.N)]
rm(list = c("female", "male"))
View(dt_1)
View(dt_2)
pretest_demographics <- rbindlist(l = list(dt_1[, .(set = "female",
age = as.numeric(Q485),
female = ifelse(test = gender == 1,
yes = 1, no = 0))],
dt_2[, .(set = "male",
age = as.numeric(Q485),
female = ifelse(test = gender == 1,
yes = 1, no = 0))]),
idcol = FALSE)
View(pretest_demographics)
raw    <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/all_apps_wide-2024-05-10.csv")
raw    <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/all_apps_wide-2024-05-10.csv")
input  <- data.table::fread(file = "../../oFeeds/studies/brand_safety/stimuli/brazil.csv")
dice   <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/processed/DICE-processed-2024-05-10.csv")
qualtrics  <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/DICE_Validation_Brand_Safety_Brazil_May+10,+2024_07.51.csv")
page_times <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/PageTimes-2024-05-13.csv")
tmp <- raw[participant._index_in_pages > 2 & !(participant.label %in% finished),
.N,
by = DICE.1.player.feed_condition]
#| include: false
finished <- short[, participant_label]
#| warning: false
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "knitr", "stringr", "jsonlite",
"ggplot2", "patchwork", "ghibli", "sjPlot", "gtsummary", "psych", "effectsize")
groundhog::groundhog.library(pkg = pkgs,
date = "2024-01-01")
rm(pkgs)
layout <- theme(panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey",
linewidth = 0.25),
axis.ticks.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.line.x.bottom = element_line(colour = "#000000",
linewidth = 0.5),
axis.line.y.left = element_blank(),
plot.title = element_text(size = rel(1))
)
c_coral     <- "#f27981"
c_yellow    <- "#F2EA79"
c_turquoise <- "#79f2ea"
c_purple    <- "#7981f2"
scale_color_custom_d <- function() {
scale_color_manual(values = c(c_purple, c_coral, c_turquoise, c_yellow))
}
scale_fill_custom_d <- function() {
scale_fill_manual(values = c(c_purple, c_coral, c_turquoise, c_yellow))
}
raw    <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/all_apps_wide-2024-05-10.csv")
input  <- data.table::fread(file = "../../oFeeds/studies/brand_safety/stimuli/brazil.csv")
dice   <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/processed/DICE-processed-2024-05-10.csv")
qualtrics  <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/DICE_Validation_Brand_Safety_Brazil_May+10,+2024_07.51.csv")
page_times <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/PageTimes-2024-05-13.csv")
setnames(old = "tweet",
new = "doc_id",
x = dice)
setnames(old = "PROLIFIC_PID",
new = "participant_label",
x = qualtrics)
qualtrics <- qualtrics[-1]
qualtrics <- qualtrics[-1]
# female
qualtrics[, female := FALSE]
qualtrics[gender == "Female", female := TRUE]
# age
qualtrics[, age := as.numeric(age)]
# condition dummy
dice[, safe := FALSE]
dice[condition == "safe", safe := TRUE]
dice[, condition := as.factor(condition)]
qualtrics[,
brand_attitude := mean(c(as.numeric(brand_att_1), as.numeric(brand_att_2), as.numeric(brand_att_3)), na.rm = TRUE),
by = participant_label]
qualtrics[, klm_initial_recall := ifelse(test = str_detect(string = str_to_lower(initial_recall),
pattern = "klm"),
yes = TRUE,
no = FALSE)]
qualtrics[, klm_second_recall := ifelse(test = str_detect(string = str_to_lower(second_recall),
pattern = "klm"),
yes = TRUE,
no = FALSE)]
qualtrics[, klm_aided_recall := ifelse(test = str_detect(string = aided_recall, pattern = "KLM"),
yes  = TRUE,
no   = FALSE)]
qualtrics[, klm_final_recall := ifelse(test = final_recall == "Yes",
yes  = TRUE,
no   = FALSE)]
qualtrics[,
binary_flood_awareness := ifelse(test = str_detect(string = flood_awareness,
pattern = "Yes,"),
yes  = 1,
no   = 0) %>%
as.logical()]
times <- page_times[session_code == dice[, unique(session_code)] & participant_code %in% dice[, unique(participant_code)]]
setorderv(x = times, cols = c("session_code", "participant_id_in_session", "page_index"))
times[,
time_spent_on_page := epoch_time_completed - shift(epoch_time_completed, n = 1, fill = NA, type = "lag"),
by = c("session_code", "participant_id_in_session")]
dice_plus <- data.table::merge.data.table(x = dice,
y = times[page_name == "C_Feed",
.(participant_code, time_spent_on_page)],
by = "participant_code")
output <- data.table::merge.data.table(x = dice_plus,
y = qualtrics,
by = "participant_label")
long <- data.table::merge.data.table(x = output,
y = input,
by = c("doc_id", "condition"))
setorder(long, participant_code, displayed_sequence)
long <- long[complete.cases(long[, .SD, .SDcols = 34:56])]
tmp <- data.table::merge.data.table(x = dice_plus[,
.(condition = unique(condition),
time_spent_on_page = unique(time_spent_on_page)),
by = participant_label],
y = qualtrics,
by = "participant_label")
# short <- short[complete.cases(short[, .SD, .SDcols = 21:ncol(short)])]
long[,
relative_dwell_time := seconds_in_viewport / time_spent_on_page,
by = participant_label]
# To do: How comes, the following code also returns values smaller than 1? Refreshs? Page loading time?
# long[, sum(relative_dwell_time, na.rm = TRUE), by = participant_label]
short <- data.table::merge.data.table(x = tmp,
y = long[displayed_sequence == 5,
.(participant_label,
relative_dwell_time,
seconds_in_viewport)],
by = "participant_label")
lm_1 <- lm(brand_attitude ~ condition, data = short)
model_summary <- summary(lm_1)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short, pooled_sd = FALSE)$Cohens_d, digits = 2)
#| label: fig-main-effects
#| fig-cap: "Effect of Misplaced Ad on Brand Evaluations"
p1 <- ggplot(data = short,
mapping = aes(x = brand_attitude,
fill = condition)) +
geom_density(alpha = 0.5) +
scale_x_continuous(limits = c(1, 7),
breaks = 1:7) +
scale_y_continuous(expand = c(0, NA)) +
scale_fill_custom_d() +
layout +
theme(legend.position = "top",
axis.text.y = element_blank(),
panel.grid.major.y = element_blank()) +
labs(title = "A: All paricipants.",
x = "Brand Attitude",
y = "Density")
p2 <- ggplot(data = short[klm_aided_recall == TRUE],
mapping = aes(x = brand_attitude,
fill = condition)) +
geom_density(alpha = 0.5) +
scale_x_continuous(limits = c(1, 7),
breaks = 1:7) +
scale_y_continuous(expand = c(0, NA)) +
scale_fill_custom_d() +
layout +
theme(legend.position = "top",
axis.text.y = element_blank(),
panel.grid.major.y = element_blank()) +
labs(title = paste0("B: Participants who recall seeing the ad (N=", short[klm_aided_recall == TRUE, .N],")."),
x = "Brand Attitude",
y = "")
combined <- (p1 | p2) & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
lm_2 <- lm(brand_attitude ~ condition, data = short)
model_summary <- summary(lm_2)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short[klm_aided_recall == TRUE], pooled_sd = FALSE)$Cohens_d, digits = 2)
glm_1 <- glm(formula = klm_aided_recall ~ seconds_in_viewport,
data = long,
subset = sequence == 5,
family = binomial(link = "logit"))
glm_2 <- glm(formula = klm_aided_recall ~ seconds_in_viewport + condition + seconds_in_viewport*condition,
data = long,
subset = sequence == 5,
family = binomial(link = "logit"))
glm_3 <- glm(formula = klm_aided_recall ~ relative_dwell_time,
data = long,
subset = sequence == 5,
family = binomial(link = "logit"))
glm_4 <- glm(formula = klm_aided_recall ~ relative_dwell_time + condition + relative_dwell_time*condition,
data = long,
subset = sequence == 5,
family = binomial(link = "logit"))
#| warning: false
#| label: tbl-recall-regressions
#| tbl-cap: Logit Results
tbl_merge(tbls = list(tbl_regression(glm_1, exponentiate = TRUE) %>% modify_column_hide(ci),
tbl_regression(glm_2, exponentiate = TRUE, show_single_row = condition) %>% modify_column_hide(ci),
tbl_regression(glm_3, exponentiate = TRUE) %>% modify_column_hide(ci),
tbl_regression(glm_4, exponentiate = TRUE, show_single_row = condition) %>% modify_column_hide(ci)),
tab_spanner = rep("Aided Recall", 4))
#| include: false
finished <- short[, participant_label]
tmp <- raw[participant._index_in_pages > 2 & !(participant.label %in% finished),
.N,
by = DICE.1.player.feed_condition]
tmp
#| warning: false
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "knitr", "stringr", "jsonlite",
"ggplot2", "patchwork", "ghibli", "sjPlot", "gtsummary", "psych", "effectsize")
groundhog::groundhog.library(pkg = pkgs,
date = "2024-01-01")
rm(pkgs)
layout <- theme(panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey",
linewidth = 0.25),
axis.ticks.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.line.x.bottom = element_line(colour = "#000000",
linewidth = 0.5),
axis.line.y.left = element_blank(),
plot.title = element_text(size = rel(1))
)
c_coral     <- "#f27981"
c_yellow    <- "#F2EA79"
c_turquoise <- "#79f2ea"
c_purple    <- "#7981f2"
scale_color_custom_d <- function() {
scale_color_manual(values = c(c_purple, c_coral, c_turquoise, c_yellow))
}
scale_fill_custom_d <- function() {
scale_fill_manual(values = c(c_purple, c_coral, c_turquoise, c_yellow))
}
raw    <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/all_apps_wide-2024-05-10.csv")
input  <- data.table::fread(file = "../../oFeeds/studies/brand_safety/stimuli/brazil.csv")
dice   <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/processed/DICE-processed-2024-05-10.csv")
qualtrics  <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/DICE_Validation_Brand_Safety_Brazil_May+10,+2024_07.51.csv")
page_times <- data.table::fread(file = "../../oFeeds/studies/brand_safety/data/raw/PageTimes-2024-05-13.csv")
setnames(old = "tweet",
new = "doc_id",
x = dice)
setnames(old = "PROLIFIC_PID",
new = "participant_label",
x = qualtrics)
qualtrics <- qualtrics[-1]
qualtrics <- qualtrics[-1]
# female
qualtrics[, female := FALSE]
qualtrics[gender == "Female", female := TRUE]
# age
qualtrics[, age := as.numeric(age)]
# condition dummy
dice[, safe := FALSE]
dice[condition == "safe", safe := TRUE]
dice[, condition := as.factor(condition)]
qualtrics[,
brand_attitude := mean(c(as.numeric(brand_att_1), as.numeric(brand_att_2), as.numeric(brand_att_3)), na.rm = TRUE),
by = participant_label]
qualtrics[, klm_initial_recall := ifelse(test = str_detect(string = str_to_lower(initial_recall),
pattern = "klm"),
yes = TRUE,
no = FALSE)]
qualtrics[, klm_second_recall := ifelse(test = str_detect(string = str_to_lower(second_recall),
pattern = "klm"),
yes = TRUE,
no = FALSE)]
qualtrics[, klm_aided_recall := ifelse(test = str_detect(string = aided_recall, pattern = "KLM"),
yes  = TRUE,
no   = FALSE)]
qualtrics[, klm_final_recall := ifelse(test = final_recall == "Yes",
yes  = TRUE,
no   = FALSE)]
qualtrics[,
binary_flood_awareness := ifelse(test = str_detect(string = flood_awareness,
pattern = "Yes,"),
yes  = 1,
no   = 0) %>%
as.logical()]
times <- page_times[session_code == dice[, unique(session_code)] & participant_code %in% dice[, unique(participant_code)]]
setorderv(x = times, cols = c("session_code", "participant_id_in_session", "page_index"))
times[,
time_spent_on_page := epoch_time_completed - shift(epoch_time_completed, n = 1, fill = NA, type = "lag"),
by = c("session_code", "participant_id_in_session")]
dice_plus <- data.table::merge.data.table(x = dice,
y = times[page_name == "C_Feed",
.(participant_code, time_spent_on_page)],
by = "participant_code")
output <- data.table::merge.data.table(x = dice_plus,
y = qualtrics,
by = "participant_label")
long <- data.table::merge.data.table(x = output,
y = input,
by = c("doc_id", "condition"))
setorder(long, participant_code, displayed_sequence)
long <- long[complete.cases(long[, .SD, .SDcols = 34:56])]
tmp <- data.table::merge.data.table(x = dice_plus[,
.(condition = unique(condition),
time_spent_on_page = unique(time_spent_on_page)),
by = participant_label],
y = qualtrics,
by = "participant_label")
# short <- short[complete.cases(short[, .SD, .SDcols = 21:ncol(short)])]
long[,
relative_dwell_time := seconds_in_viewport / time_spent_on_page,
by = participant_label]
# To do: How comes, the following code also returns values smaller than 1? Refreshs? Page loading time?
# long[, sum(relative_dwell_time, na.rm = TRUE), by = participant_label]
short <- data.table::merge.data.table(x = tmp,
y = long[displayed_sequence == 5,
.(participant_label,
relative_dwell_time,
seconds_in_viewport)],
by = "participant_label")
View(input)
lm_1 <- lm(brand_attitude ~ condition, data = short, subset = klm_initial_recall == TRUE)
model_summary <- summary(lm_1)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short[klm_initial_recall == TRUE], pooled_sd = FALSE)$Cohens_d, digits = 2)
p_value
lm_2 <- lm(brand_attitude ~ condition, data = short, subset = klm_aided_recall == TRUE)
model_summary <- summary(lm_2)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short[klm_aided_recall == TRUE], pooled_sd = FALSE)$Cohens_d, digits = 2)
p_value
lm_3 <- lm(brand_attitude ~ condition, data = short)
model_summary <- summary(lm_3)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short, pooled_sd = FALSE)$Cohens_d, digits = 2)
p_value
cohensD
lm_2 <- lm(brand_attitude ~ condition, data = short, subset = klm_aided_recall == TRUE)
model_summary <- summary(lm_2)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short[klm_aided_recall == TRUE], pooled_sd = FALSE)$Cohens_d, digits = 2)
cohensD
lm_1 <- lm(brand_attitude ~ condition, data = short, subset = klm_initial_recall == TRUE)
model_summary <- summary(lm_1)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short[klm_initial_recall == TRUE], pooled_sd = FALSE)$Cohens_d, digits = 2)
cohensD
lm_2 <- lm(brand_attitude ~ condition, data = short, subset = klm_aided_recall == FALSE)
model_summary <- summary(lm_2)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short[klm_aided_recall == FALSE], pooled_sd = FALSE)$Cohens_d, digits = 2)
cohensD
p_value
model_summary
lm_2 <- lm(brand_attitude ~ condition, data = short, subset = klm_initial_recall == FALSE)
model_summary <- summary(lm_2)
f_value <- model_summary$fstatistic[1]  # F-statistic value
f_df1 <- model_summary$fstatistic[2]    # degrees of freedom for the model
f_df2 <- model_summary$fstatistic[3]    # degrees of freedom for the residuals
p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)  # p-value from F-statistic
cohensD <- round(effectsize::cohens_d(brand_attitude ~ condition, data = short[klm_initial_recall == FALSE], pooled_sd = FALSE)$Cohens_d, digits = 2)
model_summary
short[klm_aided_recall == TRUE  & klm_initial_recall == FALSE, .N]
short[klm_aided_recall == FALSE & klm_initial_recall == FALSE, .N]
p3 <- ggplot(data = short[klm_aided_recall == FALSE & klm_initial_recall == FALSE],
mapping = aes(x = brand_attitude,
fill = condition)) +
geom_density(alpha = 0.5, bw = 0.5) +
scale_x_continuous(limits = c(1, 7),
breaks = 1:7) +
scale_y_continuous(expand = c(0, NA)) +
scale_fill_custom_d() +
layout +
theme(legend.position = "top",
axis.text.y = element_blank(),
panel.grid.major.y = element_blank()) +
labs(title = paste0("C: Participants without any recall (N=", short[klm_aided_recall == FALSE & klm_initial_recall == FALSE, .N],")."),
x = "Brand Attitude",
y = "")
p3
p3 <- ggplot(data = short[klm_aided_recall == FALSE & klm_initial_recall == FALSE],
mapping = aes(x = brand_attitude,
fill = condition)) +
geom_density(alpha = 0.5, bw = 0.25) +
scale_x_continuous(limits = c(1, 7),
breaks = 1:7) +
scale_y_continuous(expand = c(0, NA)) +
scale_fill_custom_d() +
layout +
theme(legend.position = "top",
axis.text.y = element_blank(),
panel.grid.major.y = element_blank()) +
labs(title = paste0("C: Participants without any recall (N=", short[klm_aided_recall == FALSE & klm_initial_recall == FALSE, .N],")."),
x = "Brand Attitude",
y = "")
p3
